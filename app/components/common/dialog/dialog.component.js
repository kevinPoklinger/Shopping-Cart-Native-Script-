"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var dateFormat = require('dateformat');
var DialogComponent = (function () {
    function DialogComponent(routerExtensions) {
        this.routerExtensions = routerExtensions;
        this.navStack = [];
        // this.route.params.forEach((params) => { this.productId = params['id'] });
    }
    DialogComponent.prototype.ngOnInit = function () {
        // this.show();
    };
    return DialogComponent;
}());
__decorate([
    core_1.ViewChild("container"),
    __metadata("design:type", core_1.ElementRef)
], DialogComponent.prototype, "containerView", void 0);
__decorate([
    core_1.ViewChild("dialog"),
    __metadata("design:type", core_1.ElementRef)
], DialogComponent.prototype, "dialogView", void 0);
DialogComponent = __decorate([
    core_1.Component({
        selector: "dialog",
        moduleId: module.id,
        templateUrl: "./dialog.component.html",
        styleUrls: ["./dialog.component.css"],
    }),
    __metadata("design:paramtypes", [router_1.RouterExtensions])
], DialogComponent);
exports.DialogComponent = DialogComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRpYWxvZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBZ0Y7QUFDaEYsc0RBQStEO0FBTS9ELElBQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQVF6QyxJQUFhLGVBQWU7SUFRMUIseUJBQ1UsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFINUMsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQU1WLDRFQUE0RTtJQUNoRixDQUFDO0lBRUQsa0NBQVEsR0FBUjtRQUNFLGVBQWU7SUFDakIsQ0FBQztJQThDSCxzQkFBQztBQUFELENBQUMsQUEvREQsSUErREM7QUE3RHlCO0lBQXZCLGdCQUFTLENBQUMsV0FBVyxDQUFDOzhCQUFnQixpQkFBVTtzREFBQztBQUM3QjtJQUFwQixnQkFBUyxDQUFDLFFBQVEsQ0FBQzs4QkFBYSxpQkFBVTttREFBQztBQUhqQyxlQUFlO0lBTjNCLGdCQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsUUFBUTtRQUNsQixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbkIsV0FBVyxFQUFFLHlCQUF5QjtRQUN0QyxTQUFTLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztLQUN0QyxDQUFDO3FDQVU0Qix5QkFBZ0I7R0FUakMsZUFBZSxDQStEM0I7QUEvRFksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBSb3V0ZXJFeHRlbnNpb25zIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1hbmd1bGFyL3JvdXRlclwiO1xuLy8gaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG5pbXBvcnQgeyBBbmltYXRpb24gfSBmcm9tIFwidWkvYW5pbWF0aW9uXCI7XG5pbXBvcnQgeyBBbmltYXRpb25DdXJ2ZSB9IGZyb20gXCJ1aS9lbnVtc1wiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCJ1aS9jb3JlL3ZpZXdcIjtcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcImNvbG9yXCI7XG5jb25zdCBkYXRlRm9ybWF0ID0gcmVxdWlyZSgnZGF0ZWZvcm1hdCcpO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwiZGlhbG9nXCIsXG4gIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gIHRlbXBsYXRlVXJsOiBcIi4vZGlhbG9nLmNvbXBvbmVudC5odG1sXCIsXG4gIHN0eWxlVXJsczogW1wiLi9kaWFsb2cuY29tcG9uZW50LmNzc1wiXSxcbn0pXG5leHBvcnQgY2xhc3MgRGlhbG9nQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBAVmlld0NoaWxkKFwiY29udGFpbmVyXCIpIGNvbnRhaW5lclZpZXc6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoXCJkaWFsb2dcIikgZGlhbG9nVmlldzogRWxlbWVudFJlZjtcbiAgXG4gIHRpdGxlOiBzdHJpbmc7XG4gIG5hdlN0YWNrID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByb3V0ZXJFeHRlbnNpb25zOiBSb3V0ZXJFeHRlbnNpb25zLFxuICAgICAgLy8gcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICkge1xuICAgICAgLy8gdGhpcy5yb3V0ZS5wYXJhbXMuZm9yRWFjaCgocGFyYW1zKSA9PiB7IHRoaXMucHJvZHVjdElkID0gcGFyYW1zWydpZCddIH0pO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgLy8gdGhpcy5zaG93KCk7XG4gIH1cblxuICAvLyBzaG93KCkge1xuXG4gIC8vICAgICBsZXQgY29udGFpbmVyVmlldyA9IDxWaWV3PnRoaXMuY29udGFpbmVyVmlldy5uYXRpdmVFbGVtZW50O1xuICAvLyAgICAgbGV0IGRpYWxvZ1ZpZXcgPSA8Vmlldz50aGlzLmRpYWxvZ1ZpZXcubmF0aXZlRWxlbWVudDtcblxuICAvLyAgICAgY29udGFpbmVyVmlldy5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG4gIC8vICAgICBsZXQgYW5pbWF0aW9ucyA9IFt7XG4gIC8vICAgICAgICAgdGFyZ2V0OiBjb250YWluZXJWaWV3LFxuICAvLyAgICAgICAgIGJhY2tncm91bmRDb2xvcjogbmV3IENvbG9yKDE3OCwgMCwgMCwgMCksXG4gIC8vICAgICAgICAgZHVyYXRpb246IDEwMCxcbiAgLy8gICAgICAgICBjdXJ2ZTogQW5pbWF0aW9uQ3VydmUuZWFzZU91dCxcbiAgLy8gICAgIH0sIHtcbiAgLy8gICAgICAgICB0YXJnZXQ6IGRpYWxvZ1ZpZXcsXG4gIC8vICAgICAgICAgb3BhY2l0eTogMSxcbiAgLy8gICAgICAgICB0cmFuc2xhdGU6IHt4OiAwLCB5OiAwfSxcbiAgLy8gICAgICAgICBkdXJhdGlvbjogNDAwLFxuICAvLyAgICAgICAgIGN1cnZlOiBBbmltYXRpb25DdXJ2ZS5lYXNlT3V0LFxuICAvLyAgICAgfV07XG4gIC8vICAgICBuZXcgQW5pbWF0aW9uKGFuaW1hdGlvbnMsIGZhbHNlKS5wbGF5KCk7XG4gIC8vIH1cblxuICAvLyBoaWRlKCkge1xuICAvLyAgIGxldCBjb250YWluZXJWaWV3ID0gPFZpZXc+dGhpcy5jb250YWluZXJWaWV3Lm5hdGl2ZUVsZW1lbnQ7XG4gIC8vICAgbGV0IGRpYWxvZ1ZpZXcgPSA8Vmlldz50aGlzLmRpYWxvZ1ZpZXcubmF0aXZlRWxlbWVudDtcblxuICAvLyAgIGxldCBhbmltYXRpb25zID0gW3tcbiAgLy8gICAgIHRhcmdldDogY29udGFpbmVyVmlldyxcbiAgLy8gICAgIGJhY2tncm91bmRDb2xvcjogbmV3IENvbG9yKDAsIDAsIDAsIDApLFxuICAvLyAgICAgZHVyYXRpb246IDMwMCxcbiAgLy8gICAgIGN1cnZlOiBBbmltYXRpb25DdXJ2ZS5lYXNlSW4sXG4gIC8vICAgfSwge1xuICAvLyAgICAgICB0YXJnZXQ6IGRpYWxvZ1ZpZXcsXG4gIC8vICAgICAgIG9wYWNpdHk6IDAsXG4gIC8vICAgICAgIHRyYW5zbGF0ZToge3g6IDAsIHk6IDcwMH0sXG4gIC8vICAgICAgIGR1cmF0aW9uOiAzMDAsXG4gIC8vICAgICAgIGN1cnZlOiBBbmltYXRpb25DdXJ2ZS5lYXNlT3V0LFxuICAvLyAgIH1dO1xuICAvLyAgIG5ldyBBbmltYXRpb24oYW5pbWF0aW9ucywgZmFsc2UpLnBsYXkoKS50aGVuKCgpPT57XG4gIC8vICAgICBjb250YWluZXJWaWV3LnN0eWxlLnZpc2liaWxpdHkgPSBcImNvbGxhcHNlXCI7XG4gIC8vICAgfSkudGhlbigoKT0+e1xuICAvLyAgICAgdGhpcy5yb3V0ZXJFeHRlbnNpb25zLmJhY2soKTtcbiAgLy8gICB9KTtcbiAgLy8gfVxuXG59XG4iXX0=